@model AppView.PhanTrang.PhanTrangMauSac
@{
    Layout = "~/Views/Shared/_LayoutForAdmin.cshtml";
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="~/css/nv.css">
    ViewData["Title"] = "Show";
    AppData.Models.AssignmentDBContext dBContext = new AppData.Models.AssignmentDBContext();
    int stt = 1;
    string searchData = "";
}
<h1>
    <b>Danh sách màu sắc </b>
</h1>
<hr />
<div class="row" style=" margin: 5px">
    <div class="col-7">
        <a class="btn btn-success" asp-action="Create">Thêm mới</a>
    </div>
    <div class="col-5">
        <form asp-action="SearchTheoTen" asp-controller="MauSac" method="get" enctype="multipart/form-data" style="margin-left: 30px; text-align:end">
            <div class="input-group mb-3">
                <input type="text" class="tk1" name="Ten" placeholder="Tìm kiếm theo tên hoặc mã " autocomplete="off" />
                <button class="btn btn-outline-secondary" style="color: black;" type="submit">Tìm kiếm <i class="bi bi-search"></i></button>
            </div>
        </form>
    </div>
    <div id="searchErrorMessage" class="alert alert-warning" role="alert" style="display: @(ViewData["SearchError"] != null ? "block" : "none") ; margin-top: 10px; margin-left: 11px">@ViewData["SearchError"]</div>
</div>
<table class="table" style="margin-left: 20px">
    <thead style=" background-color: #3b83ff">
        <tr>
            <th style=" background-color: #3b83ff;
    color: white;">STT</th>
            <th style=" background-color: #3b83ff;
    color: white;">Tên</th>
            <th style=" background-color: #3b83ff;
    color: white;">Mã</th>
            <th style=" background-color: #3b83ff;
    color: white;">Trạng thái</th>
            <th style=" background-color: #3b83ff"></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.listNv)
        {
            <tr>
                <td>@stt</td>
                <td>@Html.DisplayFor(modelItem => item.Ten)</td>
                <td>@Html.DisplayFor(modelItem => item.Ma)</td>
                <td>
                    @if (item.TrangThai == 0)
                    {
                        <div style="color:red">
                            <div style="color:red">Không hoạt động </div>
                        </div>
                    }
                    else
                    {
                        <div style="color:black">Hoạt động</div>
                    }
                </td>
                <td style="text-align:end">
                    <button class="btn btn-info" style="text-align:end">
                        @Html.ActionLink("Sửa", "Edit", new { id= item.ID }, new { @style = "color:white;"})
                    </button>
                    <button type="button" class="btn btn-danger" onclick="return confirm('Bạn có muốn đổi trạng thái màu @item.Ten sang trạng thái @(item.TrangThai == 1 ? "Không hoạt động" : "Hoạt động") không?');">
                        @Html.ActionLink("Xoá", "Sua", new { id = item.ID }, new { @style = "color:white;" })
                    </button>
                </td>
                @{
                    stt++;
                }
            </tr>
        }
    </tbody>
</table>
<div class="d-flex justify-content-center my-3">
    <button class="btn btn-outline-secondary" @(Model.PagingInfo.CurrentPage == 1 ? "disabled" : "")>
        <a class="text-decoration-none text-dark" href="@Url.Action("Show", new { ProductPage = 1 })">Đầu</a>
    </button>

    @if (Model.PagingInfo.CurrentPage > 1)
    {
        <button class="btn btn-outline-secondary">
            <a class="text-decoration-none text-dark" href="@Url.Action("Show", new { ProductPage = Model.PagingInfo.CurrentPage - 1 })">Trước</a>
        </button>
    }

    @for (int i = Math.Max(1, Model.PagingInfo.CurrentPage - 1); i <= Math.Min(Model.PagingInfo.TotalPages, Model.PagingInfo.CurrentPage + 1); i++)
    {
        <button class="btn @(i == Model.PagingInfo.CurrentPage ? "btn-primary" : "btn-outline-secondary")">
            <a class="text-decoration-none text-white" href="@Url.Action("Show", new { ProductPage = i })">@i</a>
        </button>
    }

    @if (Model.PagingInfo.CurrentPage < Model.PagingInfo.TotalPages)
    {
        <button class="btn btn-outline-secondary">
            <a class="text-decoration-none text-dark" href="@Url.Action("Show", new { ProductPage = Model.PagingInfo.CurrentPage + 1 })">Tiếp</a>
        </button>
    }

    <button class="btn btn-outline-secondary" @(Model.PagingInfo.CurrentPage == Model.PagingInfo.TotalPages ? "disabled" : "")>
        <a class="text-decoration-none text-dark" href="@Url.Action("Show", new { ProductPage = Model.PagingInfo.TotalPages })">Cuối</a>
    </button>
</div>

<script>
    document.getElementById('searchForm').addEventListener('submit', function (event) {
        // Lấy dữ liệu tìm kiếm từ biến toàn cục
        var searchInput = document.querySelector('.tk1');
        searchData = sessionStorage.getItem('searchData');
        // Sử dụng dữ liệu tìm kiếm để thực hiện tìm kiếm
        if (!searchInput.value.trim()) {
            event.preventDefault(); // Prevent form submission if search input is empty
            document.getElementById('searchErrorMessage').style.display = 'block';
        } else {
            var url = '/ChatLieu/SearchTheoTen?Ten=' + searchData;
            window.location.href = url;
        }
    });
    window.addEventListener('load', function (event) {
        // Lấy dữ liệu tìm kiếm từ biến toàn cục
        var searchInput = document.querySelector('.tk1');
        searchData = sessionStorage.getItem('searchData');
        // Nếu có dữ liệu tìm kiếm, thì điền dữ liệu đó vào ô tìm kiếm
        if (searchData) {
            searchInput.value = searchData;
        }
    });
    document.addEventListener('keydown', function (event) {
        // Nếu ấn backspace, thì load lại trang ban đầu
        if (event.key === 'Backspace') {
            var url = '/MauSac/Show';
            window.location.href = url;
        }
    });

</script>
